@page "/Artistas/Editar/{NomeArtista}"

@inject ArtistaAPI artistaAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">
  <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

  <MudForm>

    <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                  Variant="Variant.Outlined"
                  @bind-Value="nome"
                  Required="true"
                  RequiredError="Compo obrigatório" />

    <MudTextField Class="mt-4" T="string" Placeholder="Biografia do Artista"
                  Variant="Variant.Outlined"
                  @bind-Value="bio"
                  Lines="4"
                  Required="true"
                  RequiredError="Compo obrigatório" />

    <MudImage Class="mt-4" Src="@fileImage" />
    <MudFileUpload T="IBrowserFile" Accept=".jpeg" FilesChanged="UploadFile">
      <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.PhotoCamera"
                   for="@context">Foto de Perfil</MudButton>
      </ButtonTemplate>
    </MudFileUpload>

    <div class="d-flex align-center justify-space-between mt-4">
      <MudButton Variant="Variant.Filled"
                 @onclick="Atualizar"
                 Color="Color.Primary"
                 Class="ml-auto">Atualizar</MudButton>

      <MudButton Variant="Variant.Filled"
                 @onclick="Deletar"
                 Color="Color.Error"
                 Class="ml-auto">Deletar</MudButton>
    </div>
  </MudForm>

</MudPaper>

@code {
  private string? nome;
  private string? bio;
  private string? fileImage;
  private string? fotoPerfil;

  [Parameter]
  public string? NomeArtista { get; set; }

  public ArtistaResponse? Artista { get; set; }

  protected override async Task OnInitializedAsync()
  {
    Artista = await artistaAPI.GetArtistaAsync(NomeArtista!);
    nome = Artista.Nome;
    bio = Artista.Bio;
  }

  private async Task Atualizar()
  {
    Artista!.Deconstruct(out int Id, out string Nome, out string Bio, out string? FotoPerfil);
    Nome = nome;
    Bio = bio;
    FotoPerfil = fotoPerfil;


    var artista = new ArtistaRequestEdit(Id, Nome, Bio, FotoPerfil);
    await artistaAPI.PutArtistaAsync(artista, artista.Id);
    navigationManager.NavigateTo("/Artistas");
  }

  private async Task Deletar()
  {
    await artistaAPI.DeleteArtistaAsync(Artista!.Id);
    navigationManager.NavigateTo("/Artistas");
  }

  private async Task UploadFile(IBrowserFile file)
  {
    long maxFileSize = 1024 * 1024 * 15;
    var format = "image/jpeg";
    var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

    using var fileStream = resizedImage.OpenReadStream();
    using var memoryStream = new MemoryStream();
    await fileStream.CopyToAsync(memoryStream);

    var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
    fileImage = $"data:{format};base64,{imageUpload}";

    fotoPerfil = imageUpload;
  }
}